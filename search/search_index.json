{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Rishabh Desai","text":"<p>\ud83d\udcde +91 96375 22996 | \u2709\ufe0f d_rishabh@hotmail.com</p>"},{"location":"#professional-summary","title":"Professional Summary","text":"<p>Dedicated IT Technical Support Specialist with experience in application training, technical support, report generation, and documentation. Currently providing support for CrystalEMR users by resolving issues, delivering user training, and maintaining system functionality. Possesses strong analytical and problem-solving abilities, with a growing interest in data analysis, cloud computing, and self-hosted server environments.</p> <p>Having transitioned from civil engineering to IT, I bring a structured approach to troubleshooting and documentation, leveraging my experience in data analysis &amp; report generation.</p>"},{"location":"#experience","title":"Experience","text":""},{"location":"#it-technical-support-product-trainer","title":"IT Technical Support &amp; Product Trainer","text":"<p>Nirmay Infotech (India) Pvt Ltd | Nov 2020 \u2013 Present | Vadodara, India</p> <ul> <li>Technical Support &amp; Query Resolution </li> <li>Provide technical assistance to end-users of CrystalEMR, an electronic medical records (EMR) software.</li> <li>Diagnose and troubleshoot app-related issues, ensuring timely resolution.</li> <li> <p>Collaborate with the development team to escalate and resolve critical bugs.</p> </li> <li> <p>App Training &amp; User Onboarding </p> </li> <li>Conduct live training sessions and create user guides for new clients and healthcare professionals.</li> <li>Customize training materials to suit different user groups (doctors, clinic staff, and administrators).</li> <li> <p>Provide remote and in-person training, ensuring smooth adoption of the system.</p> </li> <li> <p>Monthly Reports &amp; Data Analysis </p> </li> <li>Generate monthly performance and usage reports using Excel and Power BI.</li> <li>Analyze user queries to identify trends and suggest app improvements.</li> <li> <p>Develop interactive dashboards for internal tracking and decision-making.</p> </li> <li> <p>Documentation &amp; Process Improvement </p> </li> <li>Create user manuals, FAQs, and troubleshooting guides.</li> <li>Maintain internal documentation for app development and feature updates.</li> <li>Work closely with the development team on feature enhancements and ongoing projects to improve system efficiency.</li> </ul>"},{"location":"#product-specialist-flexplm-support","title":"Product Specialist \u2013 FlexPLM Support","text":"<p>PTC Software (India) Pvt Ltd | April 2019 \u2013 June 2019 | Pune, India</p> <ul> <li>Provided support for FlexPLM and resolved software issues.</li> <li>Assisted clients with technical problems.</li> </ul>"},{"location":"#quantity-surveying-civil-engineering-roles-2011-2018","title":"Quantity Surveying &amp; Civil Engineering Roles (2011 \u2013 2018)","text":"<p>Held various positions in quantity surveying and construction, working with companies like Gleeds-Hooloomann Consulting, Langdon &amp; Seah, and WTP India Pvt Ltd.</p> <p>Key responsibilities included:</p> <ul> <li>Conducting quantity take-offs and preparing Bills of Quantities (BOQ)</li> <li>Managing project documentation and performing site visits for vendor billing</li> </ul> <p>While these roles helped develop analytical and structured problem-solving skills, my passion for IT and technology led me to pursue a career in technical support and software training.</p>"},{"location":"#education","title":"Education","text":"<p>\ud83c\udf93 PG-DAC (Post Graduate Diploma in Advanced Computing) \ud83d\udccd IACSD, Pune (2018 \u2013 2019)</p> <p>\ud83c\udf93 MSc Quantity Surveying \ud83d\udccd University of Salford, UK (2009 \u2013 2010)</p> <p>\ud83c\udf93 B.E. in Civil Engineering \ud83d\udccd University of Pune, India (1999 \u2013 2005)</p>"},{"location":"#skills-tools","title":"Skills &amp; Tools","text":"<ul> <li>\ud83d\udcbb Technical Support &amp; Troubleshooting</li> <li>\ud83d\udcca Data Analysis, Dashboard Creation &amp; Report Generation</li> <li>\ud83d\udcdd Documentation</li> <li>\ud83d\udcda Software Training &amp; User Onboarding</li> <li>\ud83d\udd27 App Query Handling &amp; Issue Resolution</li> </ul>"},{"location":"#details","title":"Details","text":"<p>\ud83d\udcde Phone: +91 96375 22996 \ud83d\udce7 Email: d_rishabh@hotmail.com \ud83d\udccd Location: Vadodara, India \ud83d\udcbc LinkedIn \ud83d\udd17 GitHub</p>"},{"location":"devtools/cheatsheet/Kubernetes/","title":"Kubernetes Commands","text":"<pre><code>\nKubernetes basic Objects\n\n- pod : Basic execution unit of a k8s applicaiton\n- service : An abstract way to expose an app runnig on set of pods as network service.\n- volume : A volume outlives any containers that run within the pod.\n- namespace : Namespaces provide a scope for names\n\nKubernetes higher level abstractions\n\n- deployment\n- daemonset\n- statefulset\n- replicaset : Specified number of pod replicas are running at any one time. \n- job\n\n</code></pre> <ul> <li>Basic commands</li> </ul>"},{"location":"devtools/cheatsheet/Kubernetes/#nodes","title":"nodes","text":"<pre><code>\n# get the list of nodes\n&gt; kubectl get nodes\n\n# get details of a selected node\n&gt; kubectl describe node &lt;node name&gt;\n\n# delete a node\n&gt; kubectl delete node &lt;node name&gt;\n\n\n</code></pre>"},{"location":"devtools/cheatsheet/Kubernetes/#namespace","title":"namespace","text":"<pre><code>\n# get the list of namespaces\n&gt; kubectl get namespaces\n&gt; kubectl get namespaces\n&gt; kubectl get ns\n\n# create a new namespace\n# &gt; kubectl create namespace &lt;namespace name&gt;\n&gt; kubectl create namespace ns1\n\n# delete a namespace\n# this command will also delete all the objects under the namespace\n# &gt; kubectl delete namespace &lt;namespace name&gt;\n&gt; kubectl delete namespace ns1\n\n\n</code></pre>"},{"location":"devtools/cheatsheet/Kubernetes/#pod","title":"pod","text":"<pre><code>\n\n# get the list of pods running in default namespace\n&gt; kubectl get pods\n\n# get the list of pods running in requirement namespace\n&gt; kubectl get pods -n &lt;ns name&gt;\n\n# get the list of pods with wide/more options\n&gt; kubectl get pods -n &lt;ns name&gt; -o wide\n\n# create a pod using pod1.yaml file\n&gt; kubectl create -f pod1.yaml\n\n# get the details of selected pod\n&gt; kubectl describe pod &lt;pod name&gt;\n\n# delete the pod from default namespace\n&gt; kubectl delete pod &lt;pod name&gt;\n\n# delete the pod from required namespace\n&gt; kubectl delete pod &lt;pod name&gt; -n &lt;ns name&gt;\n\n# get the logs of a selected pod\n&gt; kubectl logs &lt;pod name&gt;\n\n# get the logs continuously of a selected pod\n&gt; kubectl logs -f &lt;pod name&gt;\n\n# execute a command inside a pod\n&gt; kubectl exec -it &lt;pod name&gt; -- &lt;command&gt;\n\n# get the terminal of a selected pod\n&gt; kubectl exec -it &lt;pod name&gt; -- bash\n\n# get the terminal of a selected pod from a selected containers\n# if -c is not given, the first container will execute the command\n&gt; kubectl exec -it &lt;pod name&gt; -c &lt;container name&gt; -- bash\n\n</code></pre>"},{"location":"devtools/cheatsheet/Kubernetes/#replica-sets","title":"replica sets","text":"<ul> <li>used to create multiple replicas of selected pod</li> </ul> <pre><code>\n\n# get list of replica-set\n&gt; kubectl get replicasets\n&gt; kubectl get replicaset\n&gt; kubectl get rs\n\n# get details of selected replica-set\n&gt; kubectl describe rs &lt;rs name&gt;\n\n# to scale out or in, update the replicas in yaml file\n&gt; kubectl apply -f &lt;rs yaml file&gt;\n\n# delete a replica-set\n&gt; kubectl delete replicaset &lt;rs name&gt;\n\n</code></pre>"},{"location":"devtools/cheatsheet/Kubernetes/#service","title":"service","text":"<ul> <li>used to balance the load amongst multiple pods</li> <li>these multiple pods can be created using replica-set or deployment</li> <li>types</li> <li>ClusterIP<ul> <li>service which will be accessible only within the cluster</li> <li>service can not be accessed outside the cluster</li> <li>can be used to access an application inside the cluster by other pods</li> <li>e.g. frontend pod is accessing backend service which is load balancing the backend pods</li> <li>ports</li> <li>port<ul> <li>the internal client will send the request to service on this port</li> <li>you are free to choose this port as per your requirement</li> </ul> </li> <li>targetPort<ul> <li>service will forward the request to pod(s) on this port</li> <li>this port number must be same as the port on which the pod is listening on</li> </ul> </li> </ul> </li> <li>NodePort<ul> <li>service will make the application accessible outside the cluster</li> <li>it internally will create a clusterIP service</li> <li>ports</li> <li>port<ul> <li>the internal client will send the request to service on this port</li> <li>you are free to choose this port as per your requirement</li> </ul> </li> <li>targetPort<ul> <li>service will forward the request to pod(s) on this port</li> <li>this port number must be same as the port on which the pod is listening on</li> </ul> </li> <li>nodePort<ul> <li>the port assigned to the node on which external client will send the request</li> <li>if needed you can specify the nodePort within the range of 30000-32767</li> <li>if not specified, the kubernetes will assign a random nodePort to the service</li> </ul> </li> </ul> </li> <li>LoadBalancer<ul> <li>used to create a load balancer in cloud (for AWS it will create ALB)</li> </ul> </li> </ul> <pre><code>\n# get the list of services\n&gt; kubectl get services\n\n# get the service details\n&gt; kubectl describe service &lt;service name&gt;\n\n</code></pre>"},{"location":"devtools/cheatsheet/Kubernetes/#config-map","title":"config map","text":"<ul> <li>collection of key-value pairs (configuration)</li> <li>used for storing non-sensitive application configurations</li> <li>e.g. port number, backend url</li> <li>all the configurations stored in config map are exposed to the application   via environment variables</li> <li>all values must be in string format (wrapped in double quotes)</li> </ul> <pre><code>\n# get the list of config maps\n&gt; kubectl get configmap\n&gt; kubectl get cm\n\n# get details of selected config map\n&gt; kubectl describe cm &lt;cm name&gt;\n\n# delete selected config map\n&gt; kubectl delete cm &lt;cm name&gt;\n\n</code></pre>"},{"location":"devtools/cheatsheet/Kubernetes/#secrets","title":"secrets","text":"<ul> <li>collection of key-value pairs (configuration)</li> <li>used for storing sensitive application configurations</li> <li>e.g. password, secret, access token</li> <li>all the configurations stored in secrets are exposed to the application   via environment variables</li> <li>all values must be in bas64 encoded string format (wrapped in double quotes)</li> </ul> <pre><code>\n# get the list of secrets\n&gt; kubectl get secrets\n\n# get details of a selected secret\n&gt; kubectl describe secret &lt;secret name&gt;\n\n# delete selected secret\n&gt; kubectl delete secret &lt;secret name&gt;\n\n</code></pre>"},{"location":"devtools/cheatsheet/Kubernetes/#deployment","title":"deployment","text":"<ul> <li>represents logical deployment of an application</li> <li>internally it uses replica set to replicate the pods</li> <li>can be updated or rollbacked using rollout commands</li> </ul> <pre><code>\n# get the list of deployments\n&gt; kubectl get deployments\n&gt; kubectl get deploy\n\n# get details of selected deployment\n&gt; kubectl describe deploy &lt;deploy name&gt;\n\n# delete deployment\n&gt; kubectl delete deploy &lt;deploy name&gt;\n\n</code></pre>"},{"location":"devtools/cheatsheet/Kubernetes/#rollout","title":"rollout","text":"<pre><code>\n# restart the deployment using rollout\n# this will force deployment to load the new version from docker hub\n&gt; kubectl rollout restart deployment &lt;deployment-name&gt;\n\n# get the history of rollout\n&gt; kubectl rollout history deployment &lt;deployment-name&gt;\n\n# rollback to the older version (previous version)\n&gt; kubectl rollout undo deployment &lt;deployment-name&gt;\n\n# rollback to the specific older version\n&gt; kubectl rollout undo deployment &lt;deployment-name&gt; --to-revision=&lt;version-number&gt;\n\n# update the image tag (version)\n&gt; kubectl set image deployment &lt;deployment-name&gt; &lt;container-name&gt;=&lt;newer version&gt;\n\n# get the current status of rollout\n&gt; kubectl rollout status deployment &lt;deployment-name&gt;\n\n</code></pre>"},{"location":"devtools/cheatsheet/Kubernetes/#persistent-volumes","title":"persistent volumes","text":"<pre><code>\n# get the list of persistent volumes\n&gt; kubectl get persistentvolumes\n&gt; kubectl get pv\n\n# create a pv\n&gt; kubectl apply -f pv.yaml\n\n# get details of selected pv\n&gt; kubectl describe pv &lt;pv name&gt;\n\n# delete a pv\n&gt; kubectl delete pv &lt;pv name&gt;\n\n</code></pre>"},{"location":"devtools/cheatsheet/Kubernetes/#persistent-volume-claim","title":"persistent volume claim","text":"<pre><code>\n# get the list of pvc\n&gt; kubectl get pvc\n\n# get details of a selected pvc\n&gt; kubectl describe pvc &lt;pvc name&gt;\n\n# delete a pvc\n&gt; kubectl delete pvc &lt;pvc name&gt;\n\n</code></pre>"},{"location":"devtools/cheatsheet/Kubernetes/#metrics-service","title":"metrics service","text":"<pre><code>\n# apply the metrics server yaml\n&gt; kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n\n# the above url will deploy the metrics server in kube-system namespace\n# by default, this will not work\n# to fix the problem\n&gt; kubectl edit deployment metrics-server -n kube-system\n# add the following line on line number 45\n&gt; --kubelet-insecure-tls=true\n# save and exit =&gt; esc :wq\n\n# get the top node usage\n&gt; kubectl top nodes\n\n# get the top pods usage\n&gt; kubectl top pods\n\n# get all the resources created in the kube-system namespace\n&gt; kubectl get all -n kube-system\n\n</code></pre>"},{"location":"devtools/cheatsheet/Kubernetes/#horizontal-pod-autoscaling","title":"horizontal pod autoscaling","text":"<pre><code>\n# get the list of hpa\n&gt; kubectl get hpa\n\n# get details of selected hpa\n&gt; kubectl describe hpa &lt;hpa name&gt;\n\n# delete a selected hpa\n&gt; kubectl delete hpa &lt;hpa name&gt;\n\n</code></pre>"},{"location":"devtools/cheatsheet/Kubernetes/#job","title":"job","text":"<pre><code>\n# get the list of jobs\n&gt; kubectl get jobs\n\n# get details of selected job\n&gt; kubectl describe job &lt;job name&gt;\n\n# delete a selected job\n&gt; kubectl delete job &lt;job name&gt;\n\n</code></pre>"},{"location":"devtools/cheatsheet/Kubernetes/#cron-job","title":"cron job","text":"<pre><code>\n# get the list of cronjobs\n&gt; kubectl get cronjobs\n\n# get details of selected cronjob\n&gt; kubectl describe cronjob &lt;cronjob name&gt;\n\n# delete a selected cronjob\n&gt; kubectl delete cronjob &lt;cronjob name&gt;\n\n</code></pre>"},{"location":"devtools/cheatsheet/docker/","title":"Docker Commands","text":"<p>Docker is an open source platform that enables developers to build &amp; deploy containers that combines application source code with OS, libraries and dependencies required to run that code.</p>"},{"location":"devtools/cheatsheet/docker/#docker-objects","title":"Docker Objects","text":"<ul> <li>Images: read only template with instructions for crating docker containers.</li> <li>Container: running instance of a docker image</li> <li>Network: network interface used to connect the containers to each other or external networks</li> <li>Volumes: used to persist the data generated by and used by the containers</li> <li>Registry: private or public collection of docker images</li> <li>Service: used to deploy application in a docker multi node cluster</li> </ul>"},{"location":"devtools/cheatsheet/docker/#image-commands","title":"Image Commands","text":"<pre><code>\n# get the list of images available on the machine\n&gt; docker image ls\n\n# download or pull the image on the machine\n# &gt; docker image pull &lt;image name&gt;\n# the image gets stored in /var/lib/docker/images directory\n&gt; docker image pull hello-world\n\n# remove image from machine\n# &gt; docker image rm &lt;image name&gt;\n&gt; docker image rm hello-world\n\n# get information about an image\n&gt; docker image inspect hello-world\n</code></pre>"},{"location":"devtools/cheatsheet/docker/#container-commands","title":"Container Commands","text":"<pre><code>\n# get the list of running containers\n&gt; docker container ls\n\n# get the list of containers in all states (created, updated)\n&gt; docker container ls -a\n\n# create a container\n&gt; docker container create hello-world\n\n# get the details of selected container\n# &gt; docker container inspect &lt;container name or container id&gt;\n&gt; docker container inspect c1c\n\n# start already created container\n&gt; docker container start &lt;container id or name&gt;\n\n# stop a running container\n&gt; docker container stop &lt;container id or name&gt;\n\n# remove a stopped container\n&gt; docker container rm &lt;container id or name&gt;\n\n# remove a running container\n&gt; docker container rm --force &lt;container id or name&gt;\n\n</code></pre> <pre><code># run the container\n# create and start the container\n# this command will run a new container every time\n&gt; docker container run &lt;image name or id&gt;\n\n# set the name while running the application\n# this container will run by default in attached mode\n&gt; docker container run --name &lt;name&gt; &lt;image name or id&gt;\n\n# run the container in detached mode (background)\n# -d: detached mode\n# -i: enable the docker interactive mode\n# -t: enable the teletype terminal for the docker\n&gt; docker container run --name &lt;name&gt; -itd &lt;image name or id&gt;\n\n# enable port forwarding for a container\n# source port\n# - port allocated on OS\n# - can be any available port\n# container port\n# - port exposed by the container\n# &gt; docker container run --name &lt;name&gt; -itd -p &lt;source port&gt;:&lt;container port&gt; &lt;image name or id&gt;\n&gt; docker container run --name myhttpd -itd -p 8080:80 httpd\n\n# run mysql in a container\n&gt; docker container run --name mysql -itd -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root mysql\n\n# execute a command inside the container\n# &gt; docker container exec &lt;container name or id&gt; &lt;command&gt;\n&gt; docker container exec myhttpd date\n\n# get the terminal from the container\n# &gt; docker container exec -it &lt;container name or id&gt; &lt;shell&gt;\n&gt; docker container exec -it myhttpd bash\n\n# get the logs generated by the container\n# &gt; docker container logs &lt;container name or id&gt;\n&gt; docker container logs mysql\n\n</code></pre>"},{"location":"devtools/cheatsheet/docker/#volume","title":"Volume","text":"<pre><code>\n# get the list of volumes\n&gt; docker volume ls\n\n# remove the unused volumes\n&gt; docker volume prune\n\n# create a volume\n# - this will create a new directory name myvolume under /var/lib/docker/volumes\n&gt; docker volume create myvolume\n\n# find more information about a volume\n&gt; docker volume inspect &lt;volume name&gt;\n\n# remove a volume\n&gt; docker volume rm &lt;volume name&gt;\n\n# attach volume to a container\n# &gt; docker container run --name &lt;name&gt; -itd -p &lt;source port&gt;:&lt;container port&gt; -v &lt;volume name&gt;:&lt;mount point inside the container&gt; &lt;image name&gt;\n&gt; docker container run --name mysql -itd -p 3306:3306 -v myvolume:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root mysql\n\n</code></pre>"},{"location":"devtools/cheatsheet/docker/#images","title":"images","text":"<pre><code>customize the docker image to run your application by using **Dockerfile**\nDockerfile contains instructions/commands to create an image\ncommands\n**FROM**\nused to select the base image\n\n**COPY**\nused to copy file/directory from local machine to the image\ne.g. COPY index.html /usr/local/apache2/htdocs/ will copy the index.html from local machine to the /usr/local/apache2/htdocs/ of image\n\n**WORKDIR**\nused to set the working directory\nif the directory does not exist, the image creates this new directory\n\n**RUN**\nused to run a command while building an image\ninstalling dependencies while building an image\n\n**CMD**\nused to run the command when container starts\nthis must be the last command of your Dockerfile\n\n**EXPOSE**\nused to expose a port for consumer to access the application running inside the container\n</code></pre> <pre><code>\n# build a custom image\n# &gt; docker image build -t &lt;image name&gt;:&lt;image tag&gt; &lt;context&gt;\n&gt; docker image build -t myimage .\n\n# login with docker credentials\n&gt; docker login -u &lt;user name&gt;\n\n# create a new tag for your image to push to the docker hub\n# &gt; docker image tag &lt;existing image&gt; &lt;docker username&gt;/&lt;image name&gt;\n&gt; docker image tag myserver rishabh/myserver\n\n# push the image to the docker hub\n# &gt; docker image push &lt;image name&gt;\n&gt; docker image push rishabh/myserver\n\n# to build the image for other CPU architecture use buildx command\n&gt; docker buildx build --platform &lt;platform&gt; .\n\n\n</code></pre>"},{"location":"devtools/cheatsheet/docker/#swarm","title":"swarm","text":"<ul> <li>swarm is nothing but cluster. a cluster created by docker to run multiple containers.</li> <li>Docker Swarm is a container orchestration engine</li> <li>It takes multiple Docker Engines running on different hosts and lets you use them together</li> <li>The usage is simple: declare your applications as stacks of services, and let Docker handle the rest</li> <li>It is secure by default</li> <li>It is built using Swarmkit</li> </ul> <pre><code># check if the node is a part of any swarm\n&gt; docker system info | grep Swarm\n\n# start initializing the swarm\n&gt; docker swarm init\n\n# remove the current node from the cluster\n&gt; docker swarm leave --force\n\n# generate a token to add a worker\n&gt; docker swarm join-token worker\n\n</code></pre>"},{"location":"devtools/cheatsheet/docker/#node","title":"node","text":"<ul> <li>node is a machine in a cluster. One of the node is manager and other are workers. Managers main job is to manage the workers.</li> </ul> <pre><code># get the list of nodes\n&gt; docker node ls\n\n# get the details of selected node\n&gt; docker node inspect &lt;node id&gt;\n\n# remove a node from cluster\n&gt; docker node rm &lt;node id&gt;\n\n# promote a worker to work as manager\n&gt; docker node promote &lt;worker node id&gt;\n\n# demote a manager to work as worker\n&gt; docker node demote &lt;manager node id&gt;\n\n\n</code></pre>"},{"location":"devtools/cheatsheet/docker/#service","title":"service","text":"<ul> <li>A service is the defination of the tasks to execute on the manager or worker nodes.</li> </ul> <pre><code>\n# get the list of services\n&gt; docker service ls\n\n# create a service\n# &gt; docker service create --name &lt;service name&gt; &lt;image name&gt;\n&gt; docker service create --name myservice httpd\n\n# create a service with required desired count\n# &gt; docker service create --replicas &lt;desired count&gt; --name myservice httpd\n&gt; docker service create --replicas 5 --name httpd -p 8080:80 httpd\n\n# get the list of containers created by the service\n&gt; docker service ps &lt;service name&gt;\n\n# remove a service\n&gt; docker service rm &lt;service name&gt;\n\n# to watch the current state of service\n&gt; watch -n 1 docker container ls\n\n# horizontally scale the service\n# &gt; docker service scale &lt;service name&gt;=&lt;new desired count&gt;\n&gt; docker service scale myservice=10\n\n</code></pre>"},{"location":"devtools/cheatsheet/docker/#docker-compose","title":"Docker compose","text":"<ul> <li>used in development to deal with multiple microservices at a time</li> <li>in-built in the docker engine</li> <li>can be done using yaml configuration</li> <li>does not support Swarm</li> </ul> <pre><code>\n\n# get the list of services managed by docker compose\n&gt; docker compose ls\n\n# create images for all the services mentioned in the docker-compose file\n&gt; docker compose build\n\n# create containers for all the services\n&gt; docker compose up -d\n\n# delete all the containers for the services\n&gt; docker compose down\n\n# delete all the images along with the containers for the services\n&gt; docker compose down --rmi all\n\n\n</code></pre>"},{"location":"devtools/cheatsheet/docker/#docker-stack","title":"Docker stack","text":"<pre><code>\n# get the list of stacks\n&gt; docker stack ls\n\n# deploy or create a new stack\n# &gt; docker stack deploy --compose-file &lt;stack yaml file&gt; --detached=true &lt;stack name&gt;\n&gt; docker stack deploy --compose-file docker-stack.yaml --detached=true myapp\n\n# remove a running stack\n# &gt; docker stack rm &lt;stack name&gt;\n&gt; docker stack rm myapp\n\n\n</code></pre>"},{"location":"devtools/cheatsheet/git/","title":"Git Commands","text":"<pre><code>1.Make current folder a empty git repository :\n\ngit init\nor\ninitialize new repo and set the name of default branch to main:\ngit init --initial-branch=main ( for git version 2.28 and above)\nor\ngit init -b mail\n\n2. config the git on local machine :\n\ngit config -l ( to check current configuration)\ngit config --global user.name \"your name\"\ngit config --global user.email \"your@email.com\"\nTo check:\ngit config user.name\ngit config user.email\n\nTo check all default configuration:\n\ngit config --list\n\nSet Default Branch name as main:\n\ngit config --global init.defaultBranch main\n(To check default branch : git config init.defaultBranch)\n\n3. To establish connection to existing remote repository:\n\ngit remote add origin https://github.com/yourID/repo_name.git\n(\u201corigin\u201d is name given to \u201chttps://github.com/yourID/repo_name.git \u201c)\n\nTo Check status: git remote -v\n\n4. Add all changes in staging area (Index):\n\ngit add .\n\n5. To check the status :\n\ngit status\nor\ngit status -s\n( M = modified, A = added, ?? = untracked)\n\n6. To commit the changes :\n\ngit commit -m \"first commit\"\n\n7.push the changes to main/master remote branch :\n\ngit push -u origin main (or)\ngit push --set-upstream origin main (or)\n\ngit push origin HEAD:main\n\n\n\n</code></pre> <pre><code>Pull changes from remote repository to local:\n\ngit pull origin master\n\n</code></pre> <pre><code>Working Directory / Folder\n\nTo discard upstaged changes in the tracked file of working folder :\n\ngit checkout &lt;file.name&gt;\n\nRemove file from git tracking (from working folder and staging area):\n\ngit rm &lt;file.name&gt;\n\ngit rm -r .\n\nRemove file from working folder only and not from staging area :\n\nrm &lt;file.name&gt;\n</code></pre> <pre><code>Staging Area\n\nTo check files in staging area :\n\ngit ls-files\n\nStating changes which we want to revert (opposite of add)\n\ngit reset head &lt;file.name&gt;\n\nTo commit directly without staging area:\n\ngit commit -a -m \"commit message\"\n\nRemove file from staging area only but not from working folder :\n\ngit rm --cached &lt;file.name&gt;\n\nRestore\n\ngit restore \u2013staged &lt;file.name&gt;\n</code></pre> <pre><code>Local Repository\n\nUndo commits at Repository level\n\ngit reset --&lt;mode&gt; &lt;commit id&gt;\n\nmodes:\n1. \u2013soft : To discard change in local repository only. This will not touch the staging area as well the working library/folder.\n2. \u2013mixed : Default mode. To discard changes in local repo as well from staging area. This will not touch the working library/folder.\n3. \u2013hard : To discard everything from local repository, staging area and working library/ folder/ directory.\n\nDiscard changes in Working/Staging or Local repo\n</code></pre> Mode working folder Staging area Local Repo \u2013soft No No Yes \u2013mixed No Yes Yes \u2013hard Yes Yes Yes <pre><code>Git Branching\n\nTo view available branches\n\ngit branch\n\noutput is: * master (where * indicates active branch)\n\nTo create new branch\n\ngit branch &lt;branchName&gt;\n\nTo change branch\n\ngit checkout &lt;branchName&gt;\n\nCreate new branch and switch it new branch\n\ngit checkout -b &lt;branchName&gt;\n\nDelete branch\n\ngit branch -d &lt;branchName&gt;\n\nGo to previous branch\n\ngit checkout -\n\n</code></pre> <pre><code>Merging\n\nFast forward merge: only change happen in child branch, No change in Parent branch\n\nRecursive merge /Three way merge : simultaneous changes happen in parent branch as well child branch\n\nTo merge child branch to parent(Main) branch :\n\ngit merge &lt;child Branch Name&gt;\n\n</code></pre> <pre><code>Rebase\n\nFrom child branch:\ngit rebase master\nFrom Master branch:\ngit rebase &lt;nameOfChileBranch&gt;\n</code></pre> merge rebase It is easy to track parent(master) and child commits using commit IDs. After rebase, the child commits get new ID, hence not possible to see changed done in child branches. new merge commit created by git to resolve the conflicts no conflict created <pre><code>Status\n\ngit status\n\ngit log\n\ngit log --oneline\n\ngit log --online --graph\n\ngit log --online --graph --decorate\n</code></pre> <pre><code>To rename a file or move a file\n\ngit mv &lt;file.name&gt;\n\nTo clone a repo:\n\ngit clone &lt;url&gt;\n\nGenerete public and private key\n\nssh_keygen\n</code></pre> <pre><code>Create a .gitignore file:\n\nnano .gitignore\n\nlist the pattern of files or directories to be ignore:\n\n$echo \u2018*.log\u2019 &gt;&gt; .gitignore\n$echo \u2018built/\u2019 &gt;&gt; .gitignore\n</code></pre> <pre><code>Steps to Keep Only the Latest Commit\n\n1.Reset your branch to the latest commit\ngit reset \u2013soft $(git rev-list \u2013max-parents=0 HEAD)\n2.Create a new commit with all current changes\ngit commit -m \u201cInitial commit with all changes\u201d\n3.Force push to GitHub\ngit push origin main \u2013force\n</code></pre> <pre><code>git init\ngit add .\ngit commit -m \"first commit\"\n\ngit remote add origin https://github.com/UserName/test.git\n\ngit remote set-url origin https://UserName:PersonalAccessToken@github.com/UserName/test.git\ngit push --set-upstream origin main\n</code></pre>"},{"location":"devtools/cheatsheet/linux/","title":"Linux Commands","text":"<p>Basic Linux commands.</p>"},{"location":"devtools/cheatsheet/linux/#about-unix-and-linux","title":"About UNIX and Linux","text":"<p>UNIX : Unix is a family of Operating Systems (OS). It is made up of three parts; kernel, shell and programs.</p> <p>There are different versions of UNIX. Most popular flavor is LINUX. As Linux is is Unix-like system, we can use Unix commands to control it.</p> <p>Linux is designed by Linus Torvalds in 1990\u2019s and dedicated to open source community. It is also referred as GNU/Linux as it is based on a modified version of GNU (GNU = recursive acronym \u201cGNU is not Unix\u201d)</p> <pre><code>ls          #list the files/directories\nls -a       #list the files/directories including hidden files.\nls -l       #list the files/directories in long format.\nls -lh      #h = human-readable format of number\nls \u2013l /     #list the files/directories in long format of root user.\n</code></pre> <pre><code>pwd         #present working directory\nwhoami      #user name\nmkdir       #to make new directory.\nmkdir -p    #create directory &amp; sub-dir at same time (ex. mkdir -p dir1/dir2)\n</code></pre> <pre><code>cd change directory\ncd ..       # change directory to parent (note: space between cd and .. )\ncd \u2013        #change directory to previous directory\ncd ~        #change directory to home-directory\ncd ../..    #go to parent\u2019s parent directory (two-level up)\nclear       #clear the screen or using the keyboard ( ctrl+ l )\n</code></pre> <pre><code>cp          #copy\nmv          #move or rename\nrm          #remove (empty file)\nrm -rf      #remove file (non-empty)\nrm -Ri      #i= interactive\nrmdir       #remove directory (empty)\ncat         #concatenation \u2013 to display the content of the file on screen\ngrep        #it searches files for specified words or patterns.\n</code></pre> <pre><code>!! run      #the previous command Ex. Sudo !!\nuname -s    #gives kernel name\nuname -o    #gives Operating System name\nuname -a    #gives all of the System information\n\ndmesg | less        #to show Linux boot messages\ncat/proc/cpuinfo    #to show processor info, model name and cup architecture info.\ncat /proc/meminfo   #info. about memory installed\n\ncat &gt; textfile1     #send screen input to file name textfile1\n</code></pre> <pre><code>ctrl + U = clear content of the command line only\nctrl + A = Bring cursor to start of command line\nctrl + E = Bring cursor to end of command line\nctrl+R = search for previous commands in command prompt.\n</code></pre> <pre><code>history     #to see command history\n!&lt;history command serial number&gt; = execute particular command (ex. !102 )\n</code></pre> <pre><code>groups  #shows list of groups for current user\nchmod   #Change Mode (two ways \u2013 number mode and letter mode)\nchmod 777 t1.txt\nchmod ugo=rwx t1.txt OR chmod a=rwx t1.txt\nchmod ugo-wrx t1.txt OR chmod a-wrx t1.txt\nchmod ugo+rx t1.txt OR chmod a+rx t1.txt\nchmod -w t1.txt (remove write for all)\nchown root t1.txt (change owner of t1.txt file to root)\nchgrp root t1.txt (change group of t1.txt file to root)\n</code></pre> <pre><code>find\nfind . -name t1.txt #(find a file named t1.txt at current directory)\nfind . iname t1.txt #(i = ignore case)\nfind . -iname T* -exec ls -l {} \\; #(exec = execute the command next to it based on input before it)\nfind . -iname T* -exec rm -rf {} \\; #(remove all files starting with T or t)\nalian #(to create another name for a commnad)\nex.\nalias c=\u2019clear\u2019\n</code></pre> <pre><code>sudo\nsudo su         #(change user to root)\nsudo su \u2013       #(change user to root and import all env veriable)\nsudo su \u2013 test      #(change user to test)\n\n</code></pre> <pre><code>Cron jobs\ncrontab -l          #(list all cron jobs)\ncrontab -l -u root  #(list of cron jobs for user root)\nfor ref : (https://crontab.guru/)\n</code></pre> <pre><code>Add new user\n\nCommand : useradd\n\nstep 1) create user with new home directory\nuseradd -m -u 111 -c \"this is comment\" -s /bin/bash tom\nuseradd -m -s /bin/bash jerry\nuseradd -d /home/user1 -m user1 -s /bin/bash\n\n\n-m option ensures that a new home directory will be created for user tom\n-c to enter comment\n-u to enter unique ID (UID)\n-s to set default shell as bash\n\nstep 2) set password to newly created user\npasswd tom\n\nstep 3) switch to newly created user\nsu - tom\n\nstep 4) exit\nexit\n</code></pre> <pre><code>delete user\n\nuserdel tom\nuserdel -r tom (To remove the user and their data in one shot)\nuserdel rm -r /home/tom (to remove /home directory for the user after the account was already removed\ndelete user and take backup\nsudo deluser \u2013remove-all-files \u2013backup \u2013backup-to /user-backups/ tom\n</code></pre> <pre><code>Modifying user attributes\n\ncommand is usermod\nAdd a user to sudo group\n\nsudo usermod -aG sudo tom\n-a = add\n-G = Secondary Group\n</code></pre> <pre><code>/etc/passwd file\n\ncat /etc/passwd\n\nEntries are in below format:\n\nchgrp hello /home/folder1 (change group of folder1 to hello)\n\nusername : x (pw is encrypted): UID : GID : User info : home dir of user (/home/tom): users shell (/bin/bash)\n\nOn a Linux system, user accounts and groups are actually referenced by their IDs. Each time we reference user tom, we are actually just referencing UID 1001.\nWhen a user is created, the system by default automatically assigns the next available UID\nUID do not synchronize between installations.\nWhen we create a user, the users primary group is the same as their username.\n</code></pre> <pre><code>/etc/shadow file\n\nsudo cat /etc/shadow\n\nusername : password in hash : no in days since the password is changes from Unix epoch)\n</code></pre> <pre><code>/etc/skel file\n\nFiles contented in /etc/skel are copied into the home directory for all new users when we create them\n\nls -la /etyc/skel\n</code></pre> <pre><code>Switch users\n\nsu = to switch from one user to another. If you enter su with no option, it will switch to root and ask for root password.\n\nsudo su - = to swithc from user account that has sudo access ( to return to previously logged-in accout, simply type exit )\n\nsu - &lt;username1&gt; = To switch to an account other than root. (enter username1\u2019s password)\n\nsudo su \u2013 &lt;username1&gt; = to switch to an account other than root ( enter your username password)\n</code></pre> <pre><code>Groups\n\nWith groups , you can more efficiently control a users access to resources on your server.\ncheck user group\n\nIn Linux, just one user and just one group assigned to each file or directory. It is just one-to-one ownership.\nWhile each file or directory can only have one group assignment, any user account can be a member of any number of groups.\ngroups = To check which groups that user is a member of.\n\nWhen we create a user account, your also creating a group with same name as the user.\n/etc/group = contains information regarding the groups that have been created on your system.\n\nname of group : x : GID : comma-separated list of each user that is a member of each of the groups\n\nsudo groupadd admins = create new group\n\nsudo groupdel admins = delate a group\n\nassociate users with groups\n\nsudo usermod -aG &lt;groupname&gt; &lt;username&gt;\n-a = append\n-G = meaning we like to modify secondary group membership\n\nchange primary group of a user\n\nsudo usermod -g &lt;groupname&gt; &lt;username&gt;d\n\nremove a user from a group\n\nsudo gpasswd -d &lt;username&gt; &lt;grouptoremove&gt;\n\n\n</code></pre> <pre><code>Lock users account\n\nsudo passwd -l &lt;username&gt;\n\nunlock users account\n\nsudo passws -u &lt;username&gt;\n</code></pre> <pre><code>viewing permissions\n\nls -l\n-l = to show files as long listing\n\nOn each line, there are seven fields of information.\n\nObject tyle | USER | GROUP | WORLD\n</code></pre> <pre><code>Linux \u2013 Networking commands\n\nhostname    #display hostname\nhotname -i  #display IP address\nping        #to check connection with server.\nhost:       #displays IP address of given domain name &amp; vice versa.\nifconfig    #to see network setting and IP address\n\nip a       #get IP address\n\nFirewall:\nsudo ufw enable         #to enable firewall\nsudo ufw status         #to check status of firewall\nsudo ufw allow http     #to allow http traffic\nsudo ufw deny http      #to deny http traffic\nsudo ufw delete http    #to delte the rule\nsudo ufw reset          #to set firewall to its default state\n\nfree        #RAM memory status\nvmstat      #view memory stats\n\nPS          #processes [ ps -e, ps -f ]\n\nKill a process:\nfirst find process id and then kill it\n\nps -e | grep &lt;process-name&gt;\nkill &lt;PID&gt;\n\nstart a server\n\nsudo systemctl start apache2\nsudo systemctl restart apache2\nsudo systemctl stop apache2\n\nCreating a script\n1) create scirpt starting with #!/bin/sh and save with extension .sh\n2) Make script executable with chmod +x test.sh\n3) To execute script ./test.sh\n</code></pre> <pre><code>Redirection\nRedirection can be done for input and output\n\n&lt;       # input redirection\n&gt; or &gt;&gt; # output redirection\n2&gt;      # error redirection\n\n\n</code></pre> <pre><code>Archive\n\ntar = tape archieve\n\ntar -cvf  #c = create v = verbose, f = specify the archieve\ntar -xvf #x = extract\ntar -tvf #t = view/Display/table of contents\n\nArchive and compress\n\ntar -cvzf #archiving and compress (z option compresses and archives together)\ntar -xvzf #unarchive and compress\ntar -tvzf # display list\n\ngzip = to compress a file\n\ngzip -k file1.tar #compress\ngzip -d file1.tar.gz #uncompress\n\n</code></pre>"}]}